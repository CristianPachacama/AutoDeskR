{
  "name": "AutoDeskR",
  "tagline": "An R Interface to the AutoDesk APIs",
  "body": "# The AutoDeskR Package:\r\nAutoDeskR is an R package that provides an interface to the:\r\n* Authentication API for obtaining authentication to the AutoDesk Forge Platfrom.\r\n* Data Management API for managing data across the platform's cloud services. \r\n* Design Automation API for performing automated tasks on design files in the cloud.\r\n* Model Derivative API for translating design files into different formats, sending them to the viewer app, and extracting design data.\r\n\r\nFor more information about the AutoDesk Forge Platform , please visit [https://developer.autodesk.com](https://developer.autodesk.com)\r\n\r\n# Quick Start\r\nTo install AutoDeskR in [R](https://www.r-project.org):\r\n\r\n```\r\ndevtools::install_github('paulgovan/autodeskr')\r\n```\r\n\r\n# Authentication\r\nAutoDesk uses OAuth-based authentication for access to their services. To get started with this package, first visit the [Create an App](https://developer.autodesk.com/en/docs/oauth/v2/tutorials/create-app/) tutorial for instructions on creating an app and getting a Client ID and Secret. \r\n\r\nWe highly recommend that the Client ID, Secret, access tokens, and so on be stored in a file called `.Renviron` in the current working directory and accessing these keys with the `Sys.getenv()` function. This way potentially sensitive information is never explicitly passed to functions in this package. For more information on storing keys in the `.Renviron` file and accessing them with `Sys.getenv()`, see the appendix in this [API Best Practices](https://cran.r-project.org/web/packages/httr/vignettes/api-packages.html) vignette.  \r\n\r\nTo get an access token, use the `getToken()` function, which returns an object with the `access_token`, `type`, and `expires_in` variables.:\r\n\r\n```\r\ngetToken(id = Sys.getenv(\"client_id\"), secret = Sys.getenv(\"client_secret\"))\r\n```\r\n\r\n# Data Management\r\n## Create a Bucket and Upload a File\r\nDesign files are hosted in the cloud and organized into buckets. To create a bucket, first get a token with the `bucket:create`, `bucket:read`, and `data:write` scopes. \r\n\r\n```\r\ngetToken(id = Sys.getenv(\"client_id\"), secret = Sys.getenv(\"client_secret\"), \r\n    scope = \"bucket:create bucket:read data:write\")\r\n```\r\n\r\nThen use the `makeBucket()` function to create a bucket, where \"access_token\" is generated with the `getToken()` function and `bucket` is a name for the bucket. \r\n\r\n```\r\nmakeBucket(token = Sys.getenv(\"access_token\"), bucket = \"mybucket\")\r\n```\r\n\r\nTo check the status of a bucket:\r\n\r\n```\r\ncheckBucket(token = Sys.getenv(\"access_token\"), bucket = \"mybucket\")\r\n```\r\n\r\nTo upload a file to the bucket, use the `uploadFile()` function, which returns an object containing the `bucketKey`, `objectId` (i.e. urn), `objectKey` (i.e. file name), `size`, `contentType` (i.e. \"application/octet-stream\"), `location` and other content information. Note the unique urn of the file and store it in `.Renviron` for future use. \r\n\r\n```\r\nuploadFile(file = system.file(\"inst/samples/aerial.dwg\", package = \"AutoDeskR\"),\r\n    token = Sys.getenv(\"access_token\"), bucket = \"mybucket\")\r\n```\r\n\r\n# Design Automation\r\n##  Convert a DWG File to a PDF File\r\nTo convert a DWG file to a PDF file, use the `makePdf` function, where `source` and `destination` are the publicly accessible source of the DWG file and destination for the PDF file, respectively. \r\n\r\n```\r\nmySource <- \"http://download.autodesk.com/us/samplefiles/acad/visualization_-_aerial.dwg\"\r\nmyDestination <- \"https://drive.google.com/folderview?id=0BygncDVHf60mTDZVNDltLThLNmM&usp=sharing\"\r\nmakePdf(mySource, myDestination, token = Sys.getenv(\"access_token\"))\r\n```\r\n\r\nNote that in this example, the \"access_token\" must be generated with the `code:all` scope.\r\n\r\n\r\nTo check the status of the conversion process:\r\n\r\n```\r\ncheckPdf(mySource, myDestination, token = Sys.getenv(\"access_token\"))\r\n```\r\n\r\n# Model Derivative\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}