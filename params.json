{
  "name": "AutoDeskR",
  "tagline": "An R Interface to the AutoDesk APIs",
  "body": "![AutoDeskR](https://github.com/paulgovan/AutoDeskR/blob/master/inst/images/basicSample.png?raw=true)\r\n\r\n# The AutoDeskR Package\r\nAutoDeskR is an R package that provides an interface to the:\r\n* Authentication API for obtaining authentication to the AutoDesk Forge Platfrom.\r\n* Data Management API for managing data across the platform's cloud services. \r\n* Design Automation API for performing automated tasks on model files in the cloud.\r\n* Model Derivative API for translating design files into different formats, sending them to the viewer app, and extracting model data.\r\n* Viewer for rendering 2D and 3D models.\r\n\r\nFor more information about the AutoDesk Forge Platform, please visit [https://developer.autodesk.com](https://developer.autodesk.com)\r\n\r\n# Quick Start\r\nTo install AutoDeskR in [R](https://www.r-project.org):\r\n\r\n```\r\ndevtools::install_github('paulgovan/autodeskr')\r\n```\r\n\r\n# Authentication\r\nAutoDesk uses OAuth-based authentication for access to their services. To get started with this package, first visit the [Create an App](https://developer.autodesk.com/en/docs/oauth/v2/tutorials/create-app/) tutorial for instructions on creating an app and getting a Client ID and Secret. \r\n\r\nWe highly recommend that the Client ID, Secret, access tokens, and other keys be stored in a file called `.Renviron` and accessing these keys with the `Sys.getenv()` function. This way potentially sensitive information is never explicitly passed to functions in this package. For more information on storing keys in the `.Renviron` file and accessing them with `Sys.getenv()`, see the appendix in this [API Best Practices](https://cran.r-project.org/web/packages/httr/vignettes/api-packages.html) vignette.  \r\n\r\nTo get an access token, use the `getToken()` function, which returns an object with the `access_token`, `type`, and `expires_in` variables.:\r\n\r\n```\r\nresp <- getToken(id = Sys.getenv(\"client_id\"), secret = Sys.getenv(\"client_secret\"))\r\nmyToken <- resp$content$access_token\r\n```\r\n\r\n# Data Management\r\n## Create a Bucket and Upload a File\r\nThe Data Management API provides a way to store and access data on the platform. Model files are hosted in the cloud and organized into buckets. To create a bucket, first get a token with the `bucket:create`, `bucket:read`, and `data:write` scopes. \r\n\r\n```\r\nresp <- getToken(id = Sys.getenv(\"client_id\"), secret = Sys.getenv(\"client_secret\"), \r\n            scope = \"bucket:create bucket:read data:write\")\r\nmyToken <- resp$content$access_token\r\n```\r\n\r\nThen use the `makeBucket()` function to create a bucket, where `bucket` is a name for the bucket. \r\n\r\n```\r\nresp <- makeBucket(token = myToken, bucket = \"mybucket\")\r\nresp\r\n```\r\n\r\nTo check the status of a bucket:\r\n\r\n```\r\nresp <- checkBucket(token = myToken, bucket = \"mybucket\")\r\nresp\r\n```\r\n\r\nFinally, to upload a file to the bucket, use the `uploadFile()` function, which returns an object containing the `bucketKey`, `objectId` (i.e. urn), `objectKey` (i.e. file name), `size`, `contentType` (i.e. \"application/octet-stream\"), `location` and other content information. Note the unique urn of the file and store it in `.Renviron` for future use. \r\n\r\n```\r\nresp <- uploadFile(file = system.file(\"inst/samples/aerial.dwg\", package = \"AutoDeskR\"),\r\n            token = myToken, bucket = \"mybucket\")\r\nmyUrn <- resp$content$objectId\r\n```\r\n\r\n# Design Automation\r\n##  Convert a DWG File to a PDF File\r\nThe Design Automation API provides the ability to run automated scripts on design files. For example, to convert a DWG file to a PDF file, use the `makePdf` function, where `source` and `destination` are the publicly accessible source of the DWG file and destination for the PDF file, respectively. \r\n\r\n```\r\nmySource <- \"http://download.autodesk.com/us/samplefiles/acad/visualization_-_aerial.dwg\"\r\nmyDestination <- \"https://drive.google.com/folderview?id=0BygncDVHf60mTDZVNDltLThLNmM&usp=sharing\"\r\nresp <- makePdf(source = mySource, destination = myDestination, token = myToken)\r\n```\r\n\r\nNote that in this example, the `token` must be generated with the `code:all` scope.\r\n\r\n\r\nTo check the status of the conversion process:\r\n\r\n```\r\nresp <- checkPdf(source = mySource, destination = myDestination, token = myToken)\r\nresp\r\n```\r\n\r\n# Model Derivative\r\nThe Model Derivative API enables users to translate their designs into different formats and extract valuable data.\r\n\r\n## Translate a File into OBJ Format\r\nTo translate a supported file into OBJ format, first get an access token with the `data:read` and `data:write` scopes. Note that only certain types of files can be translated into OBJ format. To find out which types of files can be translated into what format, see the [Supported Translation Formats Table](https://developer.autodesk.com/en/docs/model-derivative/v2/overview/supported-translations/).\r\n\r\n```\r\nresp <- getToken(id = Sys.getenv(\"client_id\"), secret = Sys.getenv(\"client_secret\"), \r\n            scope = \"data:read data:write\")\r\nmyToken <- resp$content$access_token\r\n```\r\n\r\nThe AutoDesk platform requires that the urn of the file be Base-64 encoded. Fortunately, the `jsonlite` package has a nifty function for encoding the urn. \r\n\r\n```\r\n# Here myUrn was generated from the 'uploadFile()' function\r\nmyEncodedUrn <- jsonlite::base64_enc(myUrn) \r\n```\r\n\r\nThen, translate the file into OBJ format:\r\n\r\n```\r\nresp <- translateObj(urn = myEncodedUrn, token = myToken)\r\n```\r\n\r\nTo check the status of the translation process:\r\n\r\n```\r\nresp <- checkFile(urn = myEncodedUrn, token = myToken)\r\nresp\r\n```\r\n\r\nTo download an OBJ file locally, we need the output `urn` of the translated file, which is different than the `urn` of the source file. In this case, use the `getOutputUrn()` function, which returns an object containing the `result`, output `urn` and other activity information.\r\n\r\n```\r\nresp <- getOutputUrn(urn = myUrn, token = Sys.getenv(\"token\"))\r\nresp\r\n```\r\n\r\nDepending on the type of file and translation process, the response may contain multiple output `urn`s for different file types (e.g. obj, svf, png). In order to find the correct OBJ file, look through the `resp` object for a `urn` than ends in \".obj\" and assign this `urn` to `myOutputUrn`, which should look similar to the following:\r\n\r\n```\r\nmyOutputUrn < \"urn:adsk.viewing:fs.file:dXJuOmFkc2sub2JqZWN0czpvcy5vYmplY3Q6bW9kZWxkZXJpdmF0aXZlL0E1LmlhbQ/output/geometry/bc3339b2-73cd-4fba-9cb3-15363703a354.obj\"\r\n```\r\n\r\nFinally, to download the OBJ file locally:\r\n\r\n```\r\nmyEncodedOutputUrn = jsonlite::base64_enc(myOutputUrn)\r\nresp <- downloadFile(urn = myEncodedUrn, output_urn <- myEncodedOutputUrn, token = myToken)\r\n```\r\n\r\n## Prepare a File for the Viewer\r\nTo prepare a file for the online viewer, first get an access token with the `data:read` and `data:write` scopes.\r\n\r\n```\r\nresp <- getToken(id = Sys.getenv(\"client_id\"), secret = Sys.getenv(\"client_secret\"), \r\n            scope = \"data:read data:write\")\r\nmyToken <- resp$content$access_token\r\n```\r\n\r\nNex, encode the urn using the `jsonlite::base64_enc()` function. \r\n\r\n```\r\nmyEncodedUrn <- jsonlite::base64_enc(myUrn)\r\n```\r\n\r\nThen, translate the file into SVF format:\r\n\r\n```\r\nresp <- translateSvf(urn = myEncodedUrn, token = myToken)\r\n```\r\n\r\nTo check the status of the translation process:\r\n\r\n```\r\nresp <- checkFile(urn = myEncodedUrn, token = myToken)\r\nresp\r\n```\r\n\r\nFinally, embed the urn of the file in the viewer, which is described in the **Viewer** section.\r\n\r\n## Extract Data from a File\r\nTo extract data from a file, follow the steps in the previous section for getting a token with the `data:read` and `data:write` scopes, encoding the `urn` of the file using the `jsonlite::base64_enc()` function, and translating the file into SVF format using the `translateSvf()` function.  Next, retrieve metadata for a file using the `getMetadata()` function, which returns an object with the `type`, `name`, and `guid` of the file. Note the `guid` and store it in `.Renviron`.\r\n\r\n```\r\nresp <- getMetadata(urn = myEncodedUrn, token = myToken)\r\nmyGuid <- resp$content$data$metadata[[1]]$guid\r\n```\r\n\r\nThen extract data from the model with the `getData()` function.\r\n\r\n```\r\nresp <- getData(guid = myGuid, urn = myEncodedUrn, token = myToken)\r\n```\r\n\r\n## Extract Geometry from a File\r\nTo get the object tree of a file, follow the steps in the previous section for extracting data from a file, and note the `guid` and `urn`. Then use the `getObjectTree()` function.\r\n\r\n```\r\nresp <- getObjectTree(guid = myGuid, urn = myEncodedUrn, token = myToken)\r\nresp\r\n```\r\n\r\n# Viewer\r\nAutoDesk provides a WebGL-based viewer for rendering 2D and 3D models. To use the viewer, make sure to first follow the instructions in **Prepare a File for the Viewer** above. Then simply pass the `urn` of the file and the `token` to the `viewer3D()` function:\r\n\r\n```\r\nviewer3D(urn = myEncodedUrn, token = myToken)\r\n```\r\n\r\n![aerial](https://github.com/paulgovan/AutoDeskR/blob/master/inst/images/aerial.png?raw=true)\r\n\r\nAnd voila! We can view 2D and 3D models in R!\r\n\r\nThe viewer can also be embedded in Shiny applications, interactive R markdown documents, and other web pages thanks to the Shiny Modules framework. Here is a simple example of a Shiny app and the `viewerUI()` function:\r\n\r\n```\r\nui <- function(request) {\r\n shiny::fluidPage(\r\n   viewerUI(\"pg\", myEncodedUrn, myToken)\r\n )\r\n}\r\nserver <- function(input, output, session) {\r\n}\r\nshiny::shinyApp(ui, server)\r\n```\r\n\r\n# Acknowledgements\r\nMany thanks to the developers at [AutoDesk](https://github.com/Developer-Autodesk) for providing this great set of tools and for the support needed to learn and implement these APIs.\r\n\r\n# Issues\r\nThis project is in its *very* early stages. Please let us know if there are any issues using the GitHub issue tracker at [https://github.com/paulgovan/AutoDeskR/issues](https://github.com/paulgovan/AutoDeskR/issues)\r\n\r\n# Contributions\r\nContributions are welcome by sending a [pull request](https://github.com/paulgovan/AutoDeskR/pulls)\r\n\r\n# License\r\nAutoDeskR is licensed under the [Apache](http://www.apache.org/licenses/LICENSE-2.0) licence. &copy; Paul Govan (2016)\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}